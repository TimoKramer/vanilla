{"version":3,"sources":["webpack://vanilla-admin/./packages/vanilla-utils/src/mathUtils.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/stringUtils.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/systemUtils.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/typeUtils.ts","webpack://vanilla-admin/./packages/vanilla-utils/index.ts","webpack://vanilla-admin/./packages/vanilla-utils/src/debugUtils.ts","webpack://vanilla-admin/./plugins/rich-editor/src/scripts/entries/admin.ts","webpack://vanilla-admin/./packages/vanilla-i18n/src/localeStore.ts","webpack://vanilla-admin/./packages/vanilla-i18n/src/LocaleProvider.tsx","webpack://vanilla-admin/./packages/vanilla-i18n/src/translationStore.ts","webpack://vanilla-admin/./packages/vanilla-i18n/src/index.ts","webpack://vanilla-admin/./build/entries/public-path.ts"],"names":["simplifyFraction","numerator","denominator","gcd","findGCD","a","b","shorthand","hashString","str","split","reduce","prevHash","currVal","charCodeAt","slugify","options","whiteSpaceNormalizeRegexp","allowMultipleDashes","normalize","replace","trim","toLocaleLowerCase","matchAtMention","subtext","shouldStartWithSpace","requireQuotesForWhitespace","lines","lastLine","length","nonExcludedCharacters","excludeWhiteSpace","excluded","regexStr","match","RegExp","exec","rawMatch","OS","SAFE_PROTOCOL_REGEX","sanitizeUrl","url","indexArrayByKey","array","key","object","item","push","internalDebugValue","debug","newValue","undefined","logDebug","console","log","logError","error","logWarning","warn","handleRichEditorInputFormatterOptions","inputFormatterSelect","document","getElementById","updateRichFormValues","value","addEventListener","inputFormatter","richFormGroups","querySelectorAll","forEach","group","classList","remove","add","onReady","onContent","currentLocale","localeStore","callbacks","getLocales","setCurrentLocale","localeKey","callback","getCurrentLocale","loadLocales","locales","LocaleContext","React","createContext","LocaleProvider","props","useState","setLocales","useEffect","Provider","children","translationStore","loadTranslations","translations","translate","defaultTranslation","substr","t","__webpack_public_path__","assetUrl"],"mappings":";;;;;;;;;AAWO,SAASA,EAAiBC,EAAmBC,GAChD,IAGMC,EAHU,SAAVC,EAAWC,EAAGC,GAChB,OAAOA,EAAIF,EAAQE,EAAGD,EAAIC,GAAKD,EAEvBD,CAAQH,EAAWC,GAK/B,MAAO,CACHD,UAJJA,GAAwBE,EAKpBD,YAJJA,GAA4BC,EAKxBI,UAAWL,EAAc,IAAMD;;;;;;;;;;;;;ACRhC,SAASO,EAAWC,GAKvB,OAAOA,EAAIC,MAAM,IAAIC,QAJrB,SAAoBC,EAAUC,GAE1B,OAAQD,GAAY,GAAKA,EAAWC,EAAQC,WAAW,KAEnB,GAiCrC,SAASC,EACZN,EACAO,GAIA,IAAMC,EAA4BD,GAAWA,EAAQE,oBAAsB,SAAW,UACtF,OAAOT,EACFU,UAAU,OACVC,QAAQ,0BAA2B,IACnCC,OACAD,QAAQH,EAA2B,KACnCK,oBAqCF,SAASC,EACZC,GAGoB,IAFpBC,EAEoB,wDADpBC,IACoB,yDAEdC,EAAQH,EAAQd,MAAM,MACtBkB,EAAWD,EAAMA,EAAME,OAAS,GAUtC,SAASC,EAAsBC,GAC3B,IAAIC,EACA,2CAUJ,OALID,IACAC,GAAY,OAGhBA,GAAY,IAIhB,IAAIC,EACA,OAIAH,GAAsB,GACtB,UAIAA,EAAsBJ,GACtB,kBAKAD,IACAQ,EAAW,YAAcA,GAE7B,IACMC,EADQ,IAAIC,OAAOF,EAAU,MACfG,KAAKR,GACzB,OAAIM,EACO,CACHG,SAAUH,EAAM,GAChBA,MAAOA,EAAM,IAAMA,EAAM,IAK1B,KAGX,IC/JYI,ED+JNC,EAAsB,8CAarB,SAASC,EAAYC,GACxB,OAAIA,EAAIP,MAAMK,GACHE,EAEA,UAAYA,EEtJpB,SAASC,EACZC,EACAC,GAIA,IAAMC,EAAS,GADjB,uBAEE,YAAmBF,EAAnB,+CAA0B,KAAfG,EAAe,QAClBF,KAAOE,IACDA,EAAKF,KAAQC,IACfA,EAAOC,EAAKF,IAAQ,IAExBC,EAAOC,EAAKF,IAAMG,KAAKD,KAPjC,kFAUE,OAAOD,G,SDzCCP,K,UAAAA,E,kBAAAA,E,mBAAAA,M,KEPZ,6V,gCCAA;;;;;;;AAOA,IAAIU,GAAqB,EAQlB,SAASC,EAAMC,GAKlB,YAJiBC,IAAbD,IACAF,EAAqBE,GAGlBF,EASJ,SAASI,IACY,MAApBJ,IAEA,EAAAK,SAAQC,IAAR,mBAUD,SAASC,IAA0B,OAKtC,EAAAF,SAAQG,MAAR,mBASG,SAASC,IAA4B,OAKxC,EAAAJ,SAAQK,KAAR,qB,6EC7DJ;;;;;GAWA,SAASC,IACL,IAAMC,EAAuBC,SAASC,eAAe,kCACjDF,IACAG,EAAqBH,EAAqBI,OAC1CJ,EAAqBK,iBAAiB,UAAU,WAC5CF,EAAqBH,EAAqBI,WAKtD,SAASD,EAAqBG,GAC1B,IAAMC,EAAiBN,SAASO,iBAAiB,qBAC1B,SAAnBF,EACAC,EAAeE,SAAQ,SAAAC,GACnBA,EAAMC,UAAUC,OAAO,aAG3BL,EAAeE,SAAQ,SAAAC,GACnBA,EAAMC,UAAUE,IAAI,aArBhCC,YAAQf,GACRgB,YAAUhB,I,oECKNiB,EAAgB,KAChBC,EAAyB,GACzBC,EAA+B,GAK5B,SAASC,IACZ,OAAOF,EAcJ,SAASG,EAAiBC,GAC7BL,EAAgBK,EAChBH,EAAUT,SAAQ,SAAAa,GAAQ,OAAIA,OAM3B,SAASC,IACZ,OAAOP,EAMJ,SAASQ,EAAYC,GACxBR,EAAc,GAAH,mBAAOA,GAAP,YAAuBQ,IAClCP,EAAUT,SAAQ,SAAAa,GAAQ,OAAIA,O,YC5C5BI,EAAgBC,IAAMC,cAGzB,CACCH,QAAS,GACTT,cAAe;;;;GAGZ,SAASa,EAAeC,GAAuC,MACpCC,mBAASZ,KAD2B,mBAC3DM,EAD2D,KAClDO,EADkD,OAExBD,mBAASR,KAFe,mBAE3DP,EAF2D,KAE5CI,EAF4C,KAkBlE,OAdKJ,GACDnB,YAAW,2CAGfoC,qBAAU,WDIP,IAAwBX,ECHvBU,EAAWb,KACXC,EAAiBG,KDEMD,ECAR,WACXU,EAAWb,KACXC,EAAiBG,MDDzBL,EAAU/B,KAAKmC,KCGZ,CAACU,EAAYZ,IAGZ,kBAACM,EAAcQ,SAAf,CACI9B,MAAO,CACHqB,UACAT,kBAGHc,EAAMK,U;;;;;ACjCnB,IAAIC,EAAkC,GAK/B,SAASC,EAAiBC,GAC7BF,E,yVAAmB,CAAH,GAAQE,GAkBrB,SAASC,EAAU1F,EAAa2F,GAEnC,MAAyB,MAArB3F,EAAI4F,OAAO,EAAG,GACP5F,EAAI4F,OAAO,QAGQlD,IAA1B6C,EAAiBvF,GACVuF,EAAiBvF,QAGE0C,IAAvBiD,EAAmCA,EAAqB3F,EAM5D,IAAM6F,EAAIH;;;;GCjDjB,2K,gCCAA;;;;;;;;;GAuBAI,IAA0BC,YAAS,kB","file":"addons/rich-editor.min.js?62cdaeda37b7b826d95f","sourcesContent":["/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n/**\n * Get various information about a fraction.\n *\n * @param numerator The fraction numerator.\n * @param denominator The fraction denominator.\n */\nexport function simplifyFraction(numerator: number, denominator: number) {\n    const findGCD = (a, b) => {\n        return b ? findGCD(b, a % b) : a;\n    };\n    const gcd = findGCD(numerator, denominator);\n\n    numerator = numerator / gcd;\n    denominator = denominator / gcd;\n\n    return {\n        numerator,\n        denominator,\n        shorthand: denominator + \":\" + numerator,\n    };\n}\n","/**\n * Utilities related to strings.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\n/**\n * A simple, fast method of hashing a string. Similar to Java's hash function.\n * https://stackoverflow.com/a/7616484/1486603\n *\n * @param str - The string to hash.\n *\n * @returns The hash code returned.\n */\nexport function hashString(str: string): number {\n    function hashReduce(prevHash, currVal) {\n        // tslint:disable-next-line:no-bitwise\n        return (prevHash << 5) - prevHash + currVal.charCodeAt(0);\n    }\n    return str.split(\"\").reduce(hashReduce, 0);\n}\n\ntype CompareReturn = -1 | 0 | 1;\n\n/**\n * Utility for sorting values. Similar to the <=> operator in PHP.\n *\n * @param val1 The first value to compare.\n * @param val2 The second value to compare.\n *\n * @returns -1, 0, or 1\n */\nexport function compare<T extends string | number>(val1: T, val2: T): CompareReturn {\n    if (typeof val1 === \"string\" && typeof val2 === \"string\") {\n        return val1.localeCompare(val2) as CompareReturn;\n    } else {\n        if (val1 > val2) {\n            return 1;\n        } else if (val1 < val2) {\n            return -1;\n        }\n        return 0;\n    }\n}\n\n/**\n * Parse a string into a URL friendly format.\n *\n * Eg. Why Uber isn’t spelled Über -> why-uber-isnt-spelled-uber\n *\n * @param str The string to parse.\n */\nexport function slugify(\n    str: string,\n    options?: {\n        allowMultipleDashes?: boolean;\n    },\n): string {\n    const whiteSpaceNormalizeRegexp = options && options.allowMultipleDashes ? /[\\s]+/g : /[-\\s]+/g;\n    return str\n        .normalize(\"NFD\") // Normalize accented characters into ASCII equivalents\n        .replace(/[^\\w\\s$*_+~.()'\"\\-!:@]/g, \"\") // REmove characters that don't URL encode well\n        .trim() // Trim whitespace\n        .replace(whiteSpaceNormalizeRegexp, \"-\") // Normalize whitespace\n        .toLocaleLowerCase(); // Convert to locale aware lowercase.\n}\n\n/**\n * Split a string in multiple pieces similar to String.prototype.split but ignore most acccent characters.\n *\n * This will still return pieces with accents.\n *\n * @param toSplit The string to split.\n * @param splitWith The string to split with.\n */\nexport function splitStringLoosely(toSplit: string, splitWith: string): string[] {\n    const normalizedName = toSplit.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n    const normalizedSplitTerm = splitWith.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n    const normalizedPieces = normalizedName.split(new RegExp(`(${normalizedSplitTerm})`, \"i\"));\n\n    let charactersUsed = 0;\n    return normalizedPieces.map(piece => {\n        const start = charactersUsed;\n        charactersUsed += piece.length;\n        return toSplit.substring(start, charactersUsed);\n    });\n}\n\ninterface IMentionMatch {\n    match: string;\n    rawMatch: string;\n}\n\n/**\n * Custom matching to allow quotation marks in the matching string as well as spaces.\n * Spaces make things more complicated.\n *\n * @param subtext - The string to be tested.\n * @param shouldStartWithSpace - Should the pattern include a test for a whitespace prefix?\n * @returns Matching string if successful.  Null on failure to match.\n */\nexport function matchAtMention(\n    subtext: string,\n    shouldStartWithSpace: boolean = false,\n    requireQuotesForWhitespace: boolean = true,\n): IMentionMatch | null {\n    // Split the string at the lines to allow for a simpler regex.\n    const lines = subtext.split(\"\\n\");\n    const lastLine = lines[lines.length - 1];\n\n    // If you change this you MUST change the regex in src/scripts/__tests__/legacy.test.js !!!\n    /**\n     * Put together the non-excluded characters.\n     *\n     * @param {boolean} excludeWhiteSpace - Whether or not to exclude whitespace characters.\n     *\n     * @returns {string} A Regex string.\n     */\n    function nonExcludedCharacters(excludeWhiteSpace) {\n        let excluded =\n            \"[^\" +\n            '\"' + // Quote character\n            \"\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\" + // Control characters\n            \"\\\\u2028\"; // Line terminator\n\n        if (excludeWhiteSpace) {\n            excluded += \"\\\\s\";\n        }\n\n        excluded += \"]\";\n        return excluded;\n    }\n\n    let regexStr =\n        \"@\" + // @ Symbol triggers the match\n        \"(\" +\n        // One or more non-greedy characters that aren't excluded. Whitespace is allowed, but a starting quote is required.\n        '\"(' +\n        nonExcludedCharacters(false) +\n        '+?)\"?' +\n        \"|\" + // Or\n        // One or more non-greedy characters that aren't exluded. Whitespace may be excluded.\n        \"(\" +\n        nonExcludedCharacters(requireQuotesForWhitespace) +\n        '+?)\"?' +\n        \")\" +\n        \"(?:\\\\n|$)\"; // Newline terminates.\n\n    // Determined by at.who library\n    if (shouldStartWithSpace) {\n        regexStr = \"(?:^|\\\\s)\" + regexStr;\n    }\n    const regex = new RegExp(regexStr, \"gi\");\n    const match = regex.exec(lastLine);\n    if (match) {\n        return {\n            rawMatch: match[0],\n            match: match[2] || match[1], // Return either of the matching groups (quoted or unquoted).\n        };\n    }\n\n    // No match\n    return null;\n}\n\nconst SAFE_PROTOCOL_REGEX = /^(http:\\/\\/|https:\\/\\/|tel:|mailto:\\/\\/|\\/)/;\n\n/**\n * Sanitize a URL to ensure that it matches a whitelist of approved url schemes. If the url does not match one of these schemes, prepend `unsafe:` before it.\n *\n * Allowed protocols\n * - \"http://\",\n * - \"https://\",\n * - \"tel:\",\n * - \"mailto://\",\n *\n * @param url The url to sanitize.\n */\nexport function sanitizeUrl(url: string) {\n    if (url.match(SAFE_PROTOCOL_REGEX)) {\n        return url;\n    } else {\n        return \"unsafe:\" + url;\n    }\n}\n\n/**\n * Capitalize the first character of a string.\n *\n * @param str The string to modify.\n */\nexport function capitalizeFirstLetter(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Simple utility function for waiting some duration in promise.\n *\n * @param duration The amount of time to wait.\n */\nexport function promiseTimeout(duration: number): Promise<void> {\n    return new Promise(resolve => {\n        setTimeout(resolve, duration);\n    });\n}\n","/**\n * Utilities related to the user's system.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nexport enum OS {\n    IOS = \"ios\",\n    ANDROID = \"android\",\n    UNKNOWN = \"unkwown\",\n}\n\n/**\n * Provide relatively rough detection of mobile OS.\n *\n * This is not even close to perfect but can be used to try and offer,\n * OS specific input elements for things like datetimes.\n */\nexport function guessOperatingSystem(): OS {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n\n    if (/android/i.test(userAgent)) {\n        return OS.ANDROID;\n    }\n\n    // iOS detection from: http://stackoverflow.com/a/9039885/177710\n    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n        return OS.IOS;\n    }\n\n    return OS.UNKNOWN;\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\ninterface IClass {\n    new (): any;\n}\n\n/**\n * Determine if an instance is an instance of any of the listed classes.\n *\n * @param needle The instance.\n * @param haystack The classes to check.\n */\nexport function isInstanceOfOneOf(needle: any, haystack: IClass[]) {\n    for (const classItem of haystack) {\n        if (needle instanceof classItem) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Transform an array of objects and an map of objets with a given key.\n *\n * Objects that do not contain the given key are dropped.\n *\n * @param array The array to go through.\n * @param key The key to lookup.\n */\nexport function indexArrayByKey<T extends object>(\n    array: T[],\n    key: string,\n): {\n    [key: string]: T;\n} {\n    const object = {};\n    for (const item of array) {\n        if (key in item) {\n            if (!(item[key] in object)) {\n                object[item[key]] = [];\n            }\n            object[item[key]].push(item);\n        }\n    }\n    return object;\n}\n","/**\n * General utility functions.\n * This file should have NO external dependencies other than javascript.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nexport * from \"./src/debugUtils\";\nexport * from \"./src/fileUtils\";\nexport * from \"./src/mathUtils\";\nexport * from \"./src/promiseUtils\";\nexport * from \"./src/stringUtils\";\nexport * from \"./src/systemUtils\";\nexport * from \"./src/typeUtils\";\n","/**\n * Utility function related to logging/debugging.\n *\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nlet internalDebugValue = false;\n\n/**\n * Get or set the debug flag.\n *\n * @param newValue - The new value of debug.\n * @returns the current debug setting.\n */\nexport function debug(newValue?: boolean): boolean {\n    if (newValue !== undefined) {\n        internalDebugValue = newValue;\n    }\n\n    return internalDebugValue;\n}\n\n/**\n * Log something to console.\n * This only prints in debug mode.\n *\n * @param value - The value to log.\n */\nexport function logDebug(...value: any[]) {\n    if (internalDebugValue) {\n        // eslint-disable-next-line no-console\n        console.log(...value);\n    }\n}\n\n/**\n * Log an error to console.\n * This will not run in test mode _unless_ debug is set to true.\n *\n * @param value - The value to log.\n */\nexport function logError(...value: any[]) {\n    if (!internalDebugValue && process.env.NODE_ENV === \"test\") {\n        return;\n    }\n    // eslint-disable-next-line no-console\n    console.error(...value);\n}\n\n/**\n * Log a warning to console.\n * This will not run in test mode _unless_ debug is set to true.\n *\n * @param value - The value to log.\n */\nexport function logWarning(...value: any[]) {\n    if (!internalDebugValue && process.env.NODE_ENV === \"test\") {\n        return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn(...value);\n}\n","/*\n * @author Adam (charrondev) Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { onReady, onContent } from \"@library/utility/appUtils\";\n\nonReady(handleRichEditorInputFormatterOptions);\nonContent(handleRichEditorInputFormatterOptions);\n\nfunction handleRichEditorInputFormatterOptions() {\n    const inputFormatterSelect = document.getElementById(\"Form_Garden-dot-InputFormatter\") as HTMLSelectElement;\n    if (inputFormatterSelect) {\n        updateRichFormValues(inputFormatterSelect.value);\n        inputFormatterSelect.addEventListener(\"change\", () => {\n            updateRichFormValues(inputFormatterSelect.value);\n        });\n    }\n}\n\nfunction updateRichFormValues(inputFormatter: string) {\n    const richFormGroups = document.querySelectorAll(\".js-richFormGroup\");\n    if (inputFormatter === \"Rich\") {\n        richFormGroups.forEach(group => {\n            group.classList.remove(\"Hidden\");\n        });\n    } else {\n        richFormGroups.forEach(group => {\n            group.classList.add(\"Hidden\");\n        });\n    }\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nexport interface ILocale {\n    localeID: string;\n    localeKey: string;\n    regionalKey: string;\n    displayNames: {\n        [localeKey: string]: string;\n    };\n}\n\nlet currentLocale = \"en\";\nlet localeStore: ILocale[] = [];\nlet callbacks: Array<() => void> = [];\n\n/**\n * Get the available locales.\n */\nexport function getLocales(): ILocale[] {\n    return localeStore;\n}\n\n/**\n * Register a handler for if the locales change.\n * @param callback\n */\nexport function onLocaleChange(callback: () => void) {\n    callbacks.push(callback);\n}\n\n/**\n * Set the current locale.\n */\nexport function setCurrentLocale(localeKey: string) {\n    currentLocale = localeKey;\n    callbacks.forEach(callback => callback());\n}\n\n/**\n * Get the current locale.\n */\nexport function getCurrentLocale() {\n    return currentLocale;\n}\n\n/**\n * Load a group of locales.\n */\nexport function loadLocales(locales: ILocale[]) {\n    localeStore = [...localeStore, ...locales];\n    callbacks.forEach(callback => callback());\n}\n\n/**\n * Clear the loaded locales.\n */\nexport function clearLocales() {\n    localeStore = [];\n    callbacks.forEach(callback => callback());\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { ILocale, getLocales, onLocaleChange, getCurrentLocale } from \"./localeStore\";\nimport { logWarning } from \"@vanilla/utils\";\n\nconst LocaleContext = React.createContext<{\n    locales: ILocale[];\n    currentLocale: string | null;\n}>({\n    locales: [],\n    currentLocale: null,\n});\n\nexport function LocaleProvider(props: { children?: React.ReactNode }) {\n    const [locales, setLocales] = useState(getLocales());\n    const [currentLocale, setCurrentLocale] = useState(getCurrentLocale());\n\n    if (!currentLocale) {\n        logWarning(\"No locale loaded for <LocaleProvider />\");\n    }\n\n    useEffect(() => {\n        setLocales(getLocales());\n        setCurrentLocale(getCurrentLocale());\n\n        onLocaleChange(() => {\n            setLocales(getLocales());\n            setCurrentLocale(getCurrentLocale());\n        });\n    }, [setLocales, setCurrentLocale]);\n\n    return (\n        <LocaleContext.Provider\n            value={{\n                locales,\n                currentLocale,\n            }}\n        >\n            {props.children}\n        </LocaleContext.Provider>\n    );\n}\n\nexport function useLocaleInfo() {\n    return useContext(LocaleContext);\n}\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\ninterface ITranslations {\n    [key: string]: string;\n}\n\nlet translationStore: ITranslations = {};\n\n/**\n * Load a set of key value pairs as translation resources.\n */\nexport function loadTranslations(translations: ITranslations) {\n    translationStore = { ...translations };\n}\n\n/**\n * Clear all translation resources.\n */\nexport function clearTranslations() {\n    translationStore = {};\n}\n\n/**\n * Translate a string into the current locale.\n *\n * @param str - The string to translate.\n * @param defaultTranslation - The default translation to use.\n *\n * @returns Returns the translation or the default.\n */\nexport function translate(str: string, defaultTranslation?: string): string {\n    // Codes that begin with @ are considered literals.\n    if (str.substr(0, 1) === \"@\") {\n        return str.substr(1);\n    }\n\n    if (translationStore[str] !== undefined) {\n        return translationStore[str];\n    }\n\n    return defaultTranslation !== undefined ? defaultTranslation : str;\n}\n\n/**\n * The t function is an alias for translate.\n */\nexport const t = translate;\n","/**\n * @copyright 2009-2019 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nexport * from \"./LocaleDisplayer\";\nexport * from \"./localeStore\";\nexport * from \"./translationStore\";\nexport * from \"./LocaleProvider\";\n","/**\n * Set wepback's public path.\n * Otherwise the lookups of dynamically imported webpack files can fail on sites that have a different webroot\n * Eg. installed in a subfolder / using Reverse Proxy.\n *\n * @author Adam Charron <adam.c@vanillaforums.com>\n * @copyright 2009-2018 Vanilla Forums Inc.\n * @license GPL-2.0-only\n */\n\nimport { assetUrl } from \"@library/utility/appUtils\";\n\n/**\n * This needs to be a free variable.\n *\n * Webpack does some magic to make this work.\n * It you try and set a local or global version of it, it WILL NOT work.\n *\n * @see https://stackoverflow.com/questions/12934929/what-are-free-variables\n * @see https://webpack.js.org/configuration/output/#output-publicpath\n * @see https://github.com/webpack/webpack/issues/2776#issuecomment-233208623\n */\n// @ts-ignore: Cannot find variable warning. See comment aboe.\n__webpack_public_path__ = assetUrl(\"/dist/\" + __BUILD__SECTION__ + \"/\");\n"],"sourceRoot":""}